{"version":3,"sources":["features/trends/trendsSlice.js","components/Button/Button.js","features/devs/Devs.js","features/repos/Repos.js","defaultData.js","components/Dropdown/Dropdown.js","components/ContentHeader/ContentHeader.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["trendsSlice","createSlice","name","initialState","value","status","languageResetOption","dateRangeResetOption","data","reducers","setApiData","state","action","payload","loading","setLoading","languageFilter","dateRangeFilter","filterLanguage","filterDateRange","actions","getDateRangesSelector","getKeyValues","trends","getLanguagesSelector","filterDataForDisplay","filter","item","language","since","getLanguageResetOption","getLanguageFilter","getDateRangeFilter","getDateRangeResetOption","list","key","ret","Set","forEach","add","Array","from","Button","customClass","routerLink","isExternal","linkUrl","icon","title","href","target","className","join","rel","to","onclick","defaultProps","DevItem","props","rank","src","avatar","alt","username","popularRepository","repositoryName","description","url","Devs","dispatch","useDispatch","useSelector","useQuery","fetch","then","res","json","isLoading","isFetched","map","i","RepoItem","totalStars","forks","builtBy","starsSince","Repos","repo","listButtons","path","Dropdown","useState","isOpen","setIsOpen","resetOption","selectedOption","setSelectedOption","optionList","options","filteredOptions","setFilteredOptions","toggleDropdown","selectOption","option","onClick","optionName","allowSearch","type","onChange","e","toLowerCase","includes","placeholder","onSelect","ContentHeader","location","useLocation","languages","dateRanges","button","find","urlVal","pathname","style","display","alignItems","justifyContent","length","Header","link","element","App","store","configureStore","reducer","trendsReducer","Boolean","window","hostname","match","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01d653b5.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n  status: \"idle\",\n  languageResetOption: \"All\",\n  dateRangeResetOption: \"All\",\n  data: [],\n};\n\nexport const trendsSlice = createSlice({\n  name: \"trends\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setApiData: (state, action) => {\n      state.data = action.payload;\n      state.loading = false;\n    },\n    setLoading: (state) => {\n      state.loading = true;\n      state.languageFilter = state.dateRangeFilter = null;\n      state.data = [];\n    },\n    filterLanguage: (state, action) => {\n      state.languageFilter = action.payload;\n    },\n    filterDateRange: (state, action) => {\n      state.dateRangeFilter = action.payload;\n    },\n  },\n});\n\nexport const { setLoading, setApiData, filterLanguage, filterDateRange } =\n  trendsSlice.actions;\n\nexport const getDateRangesSelector = (state) => {\n  return getKeyValues(state.trends.data, \"since\");\n};\n\nexport const getLanguagesSelector = (state) => {\n  return getKeyValues(state.trends.data, \"language\");\n};\n\nexport const filterDataForDisplay = (\n  data,\n  { languageFilter, dateRangeFilter }\n) => {\n  return data.filter((item) => {\n    if (languageFilter && dateRangeFilter) {\n      return item.language === languageFilter && item.since === dateRangeFilter;\n    } else if (languageFilter) {\n      return item.language === languageFilter;\n    } else if (dateRangeFilter) {\n      return item.since === dateRangeFilter;\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const getLanguageResetOption = (state) =>\n  state.trends.languageResetOption;\n\nexport const getLanguageFilter = (state) => state.trends.languageFilter;\n\nexport const getDateRangeFilter = (state) => state.trends.dateRangeFilter;\n\nexport const getDateRangeResetOption = (state) =>\n  state.trends.dateRangeResetOption;\n\nfunction getKeyValues(list, key) {\n  const ret = new Set();\n  list.forEach((item) => {\n    if (item[key]) ret.add(item[key]);\n  });\n  return Array.from(ret);\n}\n\nexport default trendsSlice.reducer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Button.scss\";\n\nconst Button = ({\n  customClass,\n  routerLink,\n  isExternal,\n  linkUrl,\n  icon,\n  title,\n  action,\n}) => {\n  if (routerLink) {\n    if (isExternal) {\n      return (\n        <a\n          href={linkUrl}\n          target=\"_blank\"\n          className={[customClass, \"button\"].join(\" \")}\n          rel=\"noreferrer\"\n        >\n          {icon}\n          {title}\n        </a>\n      );\n    } else {\n      return (\n        <Link to={linkUrl} className={[customClass, \"button\"].join(\" \")}>\n          {icon}\n          {title}\n        </Link>\n      );\n    }\n  } else {\n    return (\n      <button className={[customClass, \"button\"].join(\" \")} onclick={action}>\n        {icon}\n        {title}\n      </button>\n    );\n  }\n};\n\nButton.defaultProps = {\n  customClass: \"\",\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport { useQuery } from \"react-query\";\nimport {\n  HiOutlineHeart,\n  HiOutlineBookmarkAlt,\n  HiOutlineFire,\n} from \"react-icons/hi\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setLoading,\n  setApiData,\n  filterDataForDisplay,\n  getDateRangeFilter,\n  getLanguageFilter,\n} from \"../trends/trendsSlice\";\nimport \"./Devs.scss\";\nimport Button from \"../../components/Button/Button\";\n\nfunction DevItem(props) {\n  return (\n    <div className=\"dev-item\">\n      <Container>\n        <Row>\n          <Col>\n            <div className=\"dev-bio\">\n              <span className=\"rank\">{props.rank}</span>\n              <img src={props.avatar} alt={\"dev avatar\"} />\n              <div className=\"dev-details\">\n                <span className=\"dev-name\">{props.name}</span>\n                <span className=\"dev-handle\">{props.username}</span>\n              </div>\n            </div>\n          </Col>\n          <Col>\n            <div className=\"dev-repo\">\n              <span>\n                <HiOutlineFire /> Popular Repo\n              </span>\n              <span className=\"repo-name\">\n                <HiOutlineBookmarkAlt />{\" \"}\n                {props.popularRepository.repositoryName}\n              </span>\n              <p>\n                {props.popularRepository.description\n                  ? props.popularRepository.description\n                  : \"No description available\"}\n              </p>\n            </div>\n          </Col>\n          <Col>\n            <div className=\"button-list\">\n              {/** TODO: replace with link of sponsorship link if it is available */}\n              {false && <Button icon={<HiOutlineHeart />} title=\"Sponsor\" />}\n              <Button\n                title=\"Follow\"\n                isExternal\n                routerLink\n                linkUrl={props.url}\n              />\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nfunction Devs() {\n  const dispatch = useDispatch();\n  const languageFilter = useSelector(getLanguageFilter);\n  const dateRangeFilter = useSelector(getDateRangeFilter);\n  const { isLoading, data, isFetched } = useQuery(\"devData\", () =>\n    fetch(\"https://gh-trending-api.herokuapp.com/developers\").then((res) =>\n      res.json()\n    )\n  );\n\n  if (isLoading) dispatch(setLoading());\n  if (isFetched) dispatch(setApiData(data));\n\n  if (isLoading) return null;\n\n  return (\n    <>\n      {filterDataForDisplay(data, { languageFilter, dateRangeFilter }).map(\n        (item, i) => (\n          <DevItem key={i} {...item} />\n        )\n      )}\n    </>\n  );\n}\n\nexport default Devs;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setLoading,\n  setApiData,\n  filterDataForDisplay,\n  getDateRangeFilter,\n  getLanguageFilter,\n} from \"../trends/trendsSlice\";\nimport { BiGitRepoForked } from \"react-icons/bi\";\nimport { HiOutlineBookmarkAlt, HiOutlineStar } from \"react-icons/hi\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport Button from \"../../components/Button/Button\";\nimport \"./Repos.scss\";\n\nfunction RepoItem(props) {\n  return (\n    <div className=\"repo-item\">\n      <Container>\n        <Row>\n          <Col>\n            <header>\n              <div className=\"repo-title\">\n                <HiOutlineBookmarkAlt />\n                <a href={props.url} target=\"_blank\" rel=\"noreferrer\">\n                  {props.username} / <span>{props.repositoryName}</span>\n                </a>\n              </div>\n              <Button\n                icon={<HiOutlineStar />}\n                title=\"Star\"\n                isExternal\n                routerLink\n                linkUrl={props.url}\n              />\n            </header>\n            <div className=\"description\">{props.description}</div>\n            <footer>\n              <div className=\"meta\">\n                <div className=\"meta-value\">{props.language}</div>\n                <div className=\"meta-value\">\n                  <HiOutlineStar /> {props.totalStars}\n                </div>\n                <div className=\"meta-value\">\n                  <BiGitRepoForked /> {props.forks}\n                </div>\n                <div className=\"meta-value\">\n                  Built by\n                  <span className=\"developer-avatars\">\n                    {props.builtBy.map(({ avatar, username }, i) => (\n                      <img\n                        key={i}\n                        src={avatar}\n                        alt={`thumbnail for ${username}`}\n                      />\n                    ))}\n                  </span>\n                </div>\n              </div>\n              <div className=\"stars-today\">\n                <HiOutlineStar /> {props.starsSince} stars today\n              </div>\n            </footer>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nfunction Repos() {\n  const dispatch = useDispatch();\n  const languageFilter = useSelector(getLanguageFilter);\n  const dateRangeFilter = useSelector(getDateRangeFilter);\n  const { isLoading, data, isFetched } = useQuery(\"repoData\", () =>\n    fetch(\"https://gh-trending-api.herokuapp.com/repositories\").then((res) =>\n      res.json()\n    )\n  );\n\n  if (isLoading) dispatch(setLoading());\n  if (isFetched) dispatch(setApiData(data));\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <>\n      {filterDataForDisplay(data, { languageFilter, dateRangeFilter }).map(\n        (repo, i) => (\n          <RepoItem key={i} {...repo} />\n        )\n      )}\n    </>\n  );\n}\n\nexport default Repos;\n","export const listButtons = [\n  {\n    title: \"Repositories\",\n    url: [\"/repos\", \"\", \"/\"],\n    path: \"/repos\",\n  },\n  {\n    title: \"Developers\",\n    url: [\"/devs\"],\n    path: \"/devs\",\n  },\n];\n","import React, { useState } from \"react\";\nimport \"./Dropdown.scss\";\n\nconst Dropdown = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(props.resetOption);\n  const [options] = useState(props.optionList);\n  const [filteredOptions, setFilteredOptions] = useState(options);\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n    if (isOpen) setFilteredOptions(options);\n  };\n\n  const searchFilters = (e) => {\n    let ret = options.filter((option) =>\n      option.toLowerCase().includes(e.target.value.toLowerCase())\n    );\n    setFilteredOptions(ret);\n  };\n\n  const selectOption = (option) => {\n    setSelectedOption(option);\n    toggleDropdown();\n  };\n\n  return (\n    <div className=\"dropdown\">\n      <div className=\"dropdown-header\" onClick={toggleDropdown}>\n        <label>{props.optionName}:</label>\n        <span>{selectedOption}</span>\n      </div>\n      {isOpen && (\n        <>\n          <div className=\"dropdown-modal\">\n            <div className=\"dropdown-modal-header\">\n              Select {props.optionName}\n            </div>\n            <div className=\"dropdown-modal-filters\">\n              {props.allowSearch && (\n                <div className=\"options-search\">\n                  <input\n                    type=\"text\"\n                    onChange={searchFilters}\n                    placeholder={`Filter ${props.optionName}`}\n                  />\n                </div>\n              )}\n              {props.resetOption && (\n                <div\n                  className=\"dropdown-option\"\n                  onClick={() => {\n                    selectOption(props.resetOption);\n                    props.onSelect(null);\n                  }}\n                >\n                  {props.resetOption}\n                </div>\n              )}\n              {filteredOptions.map((option, i) => (\n                <div\n                  key={i}\n                  className=\"dropdown-option\"\n                  onClick={() => {\n                    selectOption(option);\n                    props.onSelect(option);\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"modal-backdrop\" onClick={toggleDropdown}></div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport { useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getLanguageResetOption,\n  getDateRangeResetOption,\n  getDateRangesSelector,\n  getLanguagesSelector,\n  filterDateRange,\n  filterLanguage,\n} from \"../../features/trends/trendsSlice\";\nimport { listButtons } from \"../../defaultData\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport Button from \"../Button/Button\";\nimport \"./ContentHeader.scss\";\n\nconst ContentHeader = () => {\n  const location = useLocation();\n  const languages = useSelector(getLanguagesSelector);\n  const languageResetOption = useSelector(getLanguageResetOption);\n  const dateRangeResetOption = useSelector(getDateRangeResetOption);\n  const dateRanges = useSelector(getDateRangesSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"content-header\">\n      <Container>\n        <Row>\n          <Col>\n            <div className=\"button-group\">\n              {listButtons.map((button, i) => (\n                <Button\n                  key={i}\n                  customClass={\n                    button.url.find((urlVal) => urlVal === location.pathname)\n                      ? \"active\"\n                      : \"\"\n                  }\n                  routerLink\n                  linkUrl={button.path}\n                  title={button.title}\n                />\n              ))}\n            </div>\n          </Col>\n          <Col\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            {languages.length ? (\n              <Dropdown\n                optionName={\"Language\"}\n                optionList={languages}\n                resetOption={languageResetOption}\n                onSelect={(option) => dispatch(filterLanguage(option))}\n                allowSearch\n              />\n            ) : null}\n            {dateRanges.length ? (\n              <Dropdown\n                optionName={\"Date Range\"}\n                optionList={dateRanges}\n                resetOption={dateRangeResetOption}\n                onSelect={(option) => dispatch(filterDateRange(option))}\n                allowSearch={dateRanges.length > 1}\n              />\n            ) : null}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default ContentHeader;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { Container } from \"react-grid-system\";\nimport Devs from \"./features/devs/Devs\";\nimport Repos from \"./features/repos/Repos\";\nimport ContentHeader from \"./components/ContentHeader/ContentHeader.js\";\nimport \"./App.scss\";\n\nfunction Header() {\n  return (\n    <div className=\"jumbotron\">\n      <h1>Trending</h1>\n      <Routes>\n        {[\"\", \"repos\"].map((link, i) => (\n          <Route\n            key={i}\n            path={link}\n            element={\n              <p>See what the Github community is most excited about today.</p>\n            }\n          />\n        ))}\n        <Route\n          path=\"devs\"\n          element={\n            <p>These are the developers building the hot tools today.</p>\n          }\n        />\n      </Routes>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"page\">\n      <Header />\n      <Container>\n        <div className=\"page-content\">\n          <div className=\"list-group\">\n            <ContentHeader />\n            <Routes>\n              {[\"\", \"repos\"].map((url, i) => (\n                <Route key={i} path={url} element={<Repos />} />\n              ))}\n              <Route path=\"devs\" element={<Devs />} />\n            </Routes>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport trendsReducer from \"../features/trends/trendsSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    trends: trendsReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport \"./Styles/index.scss\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <QueryClientProvider client={queryClient}>\n          <BrowserRouter>\n            <App />\n          </BrowserRouter>\n        </QueryClientProvider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}